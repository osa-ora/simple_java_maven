# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

parameters:
- name: firstRun
  default: false
  type: boolean
  displayName: 'First Run of this Pipeline'
- name: sonarQubeRun
  default: false
  type: boolean
  displayName: 'Run Sonar Qube Analysis'
- name: ocp_token
  default: 'token_here'
  type: string
  displayName: 'Openshift Auth Token'
- name: ocp_server
  default: 'https://api.cluster.opentlc.com:6443'
  type: string
  displayName: 'Openshift Server URL'
- name: proj_name
  default: 'dev'
  type: string
  displayName: 'Openshift Project Name'
- name: app_name
  default: 'maven-app'
  type: string
  displayName: 'Openshift Application Name'
- name: sonar_proj
  default: 'maven'
  type: string
  displayName: 'SonarQube Project'
- name: sonar_token
  default: 'token_here'
  type: string
  displayName: 'SonarQube Token'
- name: sonar_url
  default: 'http://sonarqube.opentlc.com'
  type: string
  displayName: 'SonarQube Server URL'

trigger:
- main

pool:
  name: 'ocp_pool'

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    mvn clean test package
    mvn verify
    mkdir target/jar
    cp target/*.jar target/jar
  displayName: 'Build, Test and Package the application'
- script: |
    mvn sonar:sonar -Dsonar.projectKey=${{parameters.sonar_proj}} -Dsonar.host.url=${{parameters.sonar_url}} -Dsonar.login=${{parameters.sonar_token}}
  displayName: 'Run Sonar Qube Analysis'
  condition: eq('${{ parameters.sonarQubeRun }}', true)
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/TEST-*.xml'
    testRunTitle: 'Publish'
  displayName: 'Publish Test Results'
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'JaCoCo'
    summaryFileLocation: 'build/jacoco/test/jacocoTestReport.xml'
    reportDirectory: 'build/jacoco/test/html'
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)/target/jar'
    ArtifactName: 'drop'
    publishLocation: 'Container'
- script: |
    oc login --token=${{parameters.ocp_token}} --server=${{parameters.ocp_server}} --insecure-skip-tls-verify=true
    oc project ${{parameters.proj_name}}
    oc new-build --image-stream=java:latest --binary=true --name=${{parameters.app_name}}
    oc start-build ${{parameters.app_name}} --from-dir=target/jar/.
    oc logs -f bc/${{parameters.app_name}}
    oc new-app ${{parameters.app_name}} --as-deployment-config
    oc expose svc ${{parameters.app_name}} --port=8080 --name=${{parameters.app_name}}
  displayName: 'Build and Deploy the application on first runs..'
  condition: eq('${{ parameters.firstRun }}', true)
- script: |
    oc login --token=${{parameters.ocp_token}} --server=${{parameters.ocp_server}} --insecure-skip-tls-verify=true
    oc project ${{parameters.proj_name}}
    oc start-build ${{parameters.app_name}} --from-dir=target/jar/.
    oc logs -f bc/${{parameters.app_name}}
  displayName: 'Build and Deploy the application on subsequent runs..'
  condition: eq('${{ parameters.firstRun }}', false)
- script: |
    sleep 15
    curl $(oc get route ${{parameters.app_name}} -o jsonpath='{.spec.host}')/loyalty/v1/balance/123 | grep '123'
  displayName: 'Smoke Test'
